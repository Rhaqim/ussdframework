use diesel::prelude::*;
use diesel::sql_types::*;

embed_migrations!();

table! {
    services (id) {
        id -> Integer,
        name -> Text,
        function_name -> Text,
        function_url -> Nullable<Text>,
        data_key -> Text,
        service_code -> Nullable<Text>,
    }
}

pub fn run_migration(conn: &PgConnection) -> Result<(), Box<dyn std::error::Error>> {
    embedded_migrations::run(conn)?;
    Ok(())
}

#[cfg(test)]
mod tests {
    use super::*;
    use diesel::r2d2::{ConnectionManager, Pool};
    use diesel::PgConnection;
use diesel::sqlite::SqliteConnection;
use diesel_migrations::embed_migrations;
use std::error::Error;
use diesel::r2d2::{ConnectionManager, Pool};
use diesel::SqliteConnection;

    fn establish_connection() -> Pool<ConnectionManager<PgConnection>> {
        let database_url = std::env::var("DATABASE_URL").expect("DATABASE_URL must be set");
        let manager = ConnectionManager::<PgConnection>::new(database_url);
        Pool::builder().build(manager).expect("Failed to create pool.")
    }

    #[test]
    fn test_migration() {
        let pool = establish_connection();
        let conn = &pool.get().unwrap();
        run_migration(conn).unwrap();
    }
}
#[cfg(feature = "sqlite")]
mod migrations {
    use diesel::prelude::*;

    embed_migrations!();

    pub fn run_migration(conn: &SqliteConnection) -> Result<(), Box<dyn Error>> {
        embedded_migrations::run(conn)?;
        Ok(())
    }

    #[cfg(test)]
    mod tests {
        use super::*;

        fn establish_connection() -> Pool<ConnectionManager<SqliteConnection>> {
            let database_url = std::env::var("DATABASE_URL").expect("DATABASE_URL must be set");
            let manager = ConnectionManager::<SqliteConnection>::new(database_url);
            Pool::builder().build(manager).expect("Failed to create pool.")
        }

        #[test]
        fn test_migration() {
            let pool = establish_connection();
            let conn = &pool.get().unwrap();
            run_migration(conn).unwrap();
        }
    }
}